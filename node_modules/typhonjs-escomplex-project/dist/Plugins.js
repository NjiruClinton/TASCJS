'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _PluginManager = require('typhonjs-plugin-manager/dist/PluginManager');

var _PluginManager2 = _interopRequireDefault(_PluginManager);

var _PluginMetricsProject = require('escomplex-plugin-metrics-project/dist/PluginMetricsProject');

var _PluginMetricsProject2 = _interopRequireDefault(_PluginMetricsProject);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Provides a wrapper around PluginManager for ESComplexProject. Several convenience methods for the plugin callbacks
 * properly manage and or create initial data that are processed by the plugins.
 *
 * The default plugins loaded include:
 * @see https://www.npmjs.com/package/escomplex-plugin-metrics-project
 */
var Plugins = function () {
  /**
   * Initializes Plugins.
   *
   * @param {object}   options - module options including user plugins to load including:
   * ```
   * (boolean)         loadDefaultPlugins - When false ESComplexProject will not load any default plugins.
   * (Array<Object>)   plugins - A list of ESComplexProject plugins that have already been instantiated.
   * ```
   */
  function Plugins() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    (0, _classCallCheck3.default)(this, Plugins);

    /**
     * Provides a generic plugin manager for dispatching events to module plugins.
     * @type {PluginManager}
     * @private
     */
    this._pluginManager = new _PluginManager2.default();

    if (typeof options.loadDefaultPlugins === 'boolean' && !options.loadDefaultPlugins) {/* nop */} else {
      this._pluginManager.add({ name: 'escomplex-plugin-metrics-project', instance: new _PluginMetricsProject2.default() });
    }
  }

  /**
   * Initializes the default `settings` object hash and then invokes the `onConfigure` plugin callback for all loaded
   * plugins.
   *
   * @param {object}   options - (Optional) project processing options.
   *
   * @returns {object}
   */


  (0, _createClass3.default)(Plugins, [{
    key: 'onConfigure',
    value: function onConfigure(options) {
      /**
       * Default settings with potential user override of `serializeModules` and `skipCalculation`.
       * @type {{serializeModules: boolean, skipCalculation: boolean}}
       */
      var settings = {
        serializeModules: typeof options.serializeModules === 'boolean' ? options.serializeModules : true,
        skipCalculation: typeof options.skipCalculation === 'boolean' ? options.skipCalculation : false
      };

      var event = this._pluginManager.invokeSyncEvent('onConfigure', { options: options, settings: settings });
      return event !== null ? event.settings : settings;
    }

    /**
     * Invokes the `onProjectAverage` plugin callback for all loaded plugins such they might average any calculated
     * results.
     *
     * @param {ProjectReport}  projectReport - An instance of ProjectReport.
     * @param {object}         pathModule - Provides an object which matches the Node path module.
     * @param {object}         settings - Settings for project processing.
     *
     * @returns {ProjectReport}
     */

  }, {
    key: 'onProjectAverage',
    value: function onProjectAverage(projectReport, pathModule, settings) {
      var event = this._pluginManager.invokeSyncEvent('onProjectAverage', void 0, { projectReport: projectReport, pathModule: pathModule, settings: settings });

      return event !== null ? event.projectReport : projectReport;
    }

    /**
     * Invokes the `onProjectCalculate` plugin callback for all loaded plugins such they might finish calculating
     * results.
     *
     * @param {ProjectReport}  projectReport - An instance of ProjectReport.
     * @param {object}         pathModule - Provides an object which matches the Node path module.
     * @param {object}         settings - Settings for project processing.
     *
     * @returns {ProjectReport}
     */

  }, {
    key: 'onProjectCalculate',
    value: function onProjectCalculate(projectReport, pathModule, settings) {
      var event = this._pluginManager.invokeSyncEvent('onProjectCalculate', void 0, { projectReport: projectReport, pathModule: pathModule, settings: settings });

      return event !== null ? event.projectReport : projectReport;
    }

    /**
     * Invokes the `onProjectEnd` plugin callback for all loaded plugins at the end of module processing.
     *
     * @param {ProjectReport}  projectReport - An instance of ProjectReport.
     * @param {object}         pathModule - Provides an object which matches the Node path module.
     * @param {object}         settings - Settings for project processing.
     *
     * @returns {ProjectReport}
     */

  }, {
    key: 'onProjectEnd',
    value: function onProjectEnd(projectReport, pathModule, settings) {
      var event = this._pluginManager.invokeSyncEvent('onProjectEnd', void 0, { projectReport: projectReport, pathModule: pathModule, settings: settings });

      return event !== null ? event.projectReport : projectReport;
    }

    /**
     * Invokes the `onProjectPostAverage` plugin callback for all loaded plugins such they might finish any calculations
     * that involve averaged results.
     *
     * @param {ProjectReport}  projectReport - An instance of ProjectReport.
     * @param {object}         pathModule - Provides an object which matches the Node path module.
     * @param {object}         settings - Settings for project processing.
     *
     * @returns {ProjectReport}
     */

  }, {
    key: 'onProjectPostAverage',
    value: function onProjectPostAverage(projectReport, pathModule, settings) {
      var event = this._pluginManager.invokeSyncEvent('onProjectPostAverage', void 0, { projectReport: projectReport, pathModule: pathModule, settings: settings });

      return event !== null ? event.projectReport : projectReport;
    }

    /**
     * Initializes the default `report` object hash and then invokes the `onProjectStart` plugin callback for all loaded
     * plugins.
     *
     * @param {object}   pathModule - Provides an object which matches the Node path module.
     * @param {object}   settings - Settings for project processing.
     */

  }, {
    key: 'onProjectStart',
    value: function onProjectStart(pathModule, settings) {
      this._pluginManager.invokeSyncEvent('onProjectStart', void 0, { pathModule: pathModule, settings: settings });
    }
  }]);
  return Plugins;
}();

exports.default = Plugins;
module.exports = exports['default'];